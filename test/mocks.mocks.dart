// Mocks generated by Mockito 5.4.4 from annotations
// in task/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:task/app/data/models/task_model.dart' as _i3;
import 'package:task/app/data/models/user_model.dart' as _i4;
import 'package:task/app/data/repositories/auth_repository.dart' as _i11;
import 'package:task/app/data/repositories/task_repository.dart' as _i10;
import 'package:task/app/data/repositories/user_repository.dart' as _i13;
import 'package:task/app/data/services/remote/auth_service.dart' as _i5;
import 'package:task/app/data/services/remote/gemini_service.dart' as _i12;
import 'package:task/app/data/services/remote/task_service.dart' as _i8;
import 'package:task/app/data/services/remote/user_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollectionReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskModel_1 extends _i1.SmartFake implements _i3.TaskModel {
  _FakeTaskModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_2<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_3 extends _i1.SmartFake implements _i4.UserModel {
  _FakeUserModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.UserModel?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<String> changePassword(
    String? userId,
    String? oldPassword,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            userId,
            oldPassword,
            newPassword,
          ],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #changePassword,
            [
              userId,
              oldPassword,
              newPassword,
            ],
          ),
        )),
      ) as _i6.Future<String>);
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i8.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<Object?> get collection => (super.noSuchMethod(
        Invocation.getter(#collection),
        returnValue: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#collection),
        ),
      ) as _i2.CollectionReference<Object?>);

  @override
  _i3.TaskModel fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeTaskModel_1(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i3.TaskModel);

  @override
  _i6.Future<List<_i3.TaskModel>> getTasksByUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByUser,
          [userId],
        ),
        returnValue: _i6.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i6.Future<List<_i3.TaskModel>>);

  @override
  _i6.Future<List<_i3.TaskModel>> getTasksByStatus(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByStatus,
          [status],
        ),
        returnValue: _i6.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i6.Future<List<_i3.TaskModel>>);

  @override
  _i6.Future<_i3.TaskModel?> create(_i3.TaskModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [model],
        ),
        returnValue: _i6.Future<_i3.TaskModel?>.value(),
      ) as _i6.Future<_i3.TaskModel?>);

  @override
  _i6.Future<_i3.TaskModel?> update(_i3.TaskModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [model],
        ),
        returnValue: _i6.Future<_i3.TaskModel?>.value(),
      ) as _i6.Future<_i3.TaskModel?>);

  @override
  _i6.Future<List<_i3.TaskModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i6.Future<List<_i3.TaskModel>>);

  @override
  _i6.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i3.TaskModel?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i6.Future<_i3.TaskModel?>.value(),
      ) as _i6.Future<_i3.TaskModel?>);

  @override
  _i6.Future<_i2.QuerySnapshot<Object?>> query({
    List<String>? whereFields,
    List<dynamic>? whereValues,
    String? orderBy,
    bool? descending,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [],
          {
            #whereFields: whereFields,
            #whereValues: whereValues,
            #orderBy: orderBy,
            #descending: descending,
            #limit: limit,
          },
        ),
        returnValue: _i6.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_2<Object?>(
          this,
          Invocation.method(
            #query,
            [],
            {
              #whereFields: whereFields,
              #whereValues: whereValues,
              #orderBy: orderBy,
              #descending: descending,
              #limit: limit,
            },
          ),
        )),
      ) as _i6.Future<_i2.QuerySnapshot<Object?>>);

  @override
  _i6.Future<void> batchDelete(List<String>? ids) => (super.noSuchMethod(
        Invocation.method(
          #batchDelete,
          [ids],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> batchUpdate(List<_i3.TaskModel>? models) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchUpdate,
          [models],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i9.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<Object?> get collection => (super.noSuchMethod(
        Invocation.getter(#collection),
        returnValue: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#collection),
        ),
      ) as _i2.CollectionReference<Object?>);

  @override
  _i4.UserModel fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeUserModel_3(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i4.UserModel);

  @override
  _i6.Future<_i4.UserModel?> getUserByEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByEmail,
          [email],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<_i4.UserModel?> create(_i4.UserModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [model],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<void> deleteUserAndTasks(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUserAndTasks,
          [userId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.UserModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<List<_i4.UserModel>>.value(<_i4.UserModel>[]),
      ) as _i6.Future<List<_i4.UserModel>>);

  @override
  _i6.Future<_i4.UserModel?> fetchUserWithTasks(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserWithTasks,
          [userId],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<_i4.UserModel?> update(_i4.UserModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [model],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i4.UserModel?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<_i2.QuerySnapshot<Object?>> query({
    List<String>? whereFields,
    List<dynamic>? whereValues,
    String? orderBy,
    bool? descending,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [],
          {
            #whereFields: whereFields,
            #whereValues: whereValues,
            #orderBy: orderBy,
            #descending: descending,
            #limit: limit,
          },
        ),
        returnValue: _i6.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_2<Object?>(
          this,
          Invocation.method(
            #query,
            [],
            {
              #whereFields: whereFields,
              #whereValues: whereValues,
              #orderBy: orderBy,
              #descending: descending,
              #limit: limit,
            },
          ),
        )),
      ) as _i6.Future<_i2.QuerySnapshot<Object?>>);

  @override
  _i6.Future<void> batchDelete(List<String>? ids) => (super.noSuchMethod(
        Invocation.method(
          #batchDelete,
          [ids],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> batchUpdate(List<_i4.UserModel>? models) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchUpdate,
          [models],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ITaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITaskRepository extends _i1.Mock implements _i10.ITaskRepository {
  MockITaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i3.TaskModel>> getTasksByUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByUser,
          [userId],
        ),
        returnValue: _i6.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i6.Future<List<_i3.TaskModel>>);

  @override
  _i6.Future<List<_i3.TaskModel>> getTasksByStatus(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByStatus,
          [status],
        ),
        returnValue: _i6.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i6.Future<List<_i3.TaskModel>>);

  @override
  _i6.Future<_i3.TaskModel?> create(_i3.TaskModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [model],
        ),
        returnValue: _i6.Future<_i3.TaskModel?>.value(),
      ) as _i6.Future<_i3.TaskModel?>);

  @override
  _i6.Future<_i3.TaskModel?> update(_i3.TaskModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [model],
        ),
        returnValue: _i6.Future<_i3.TaskModel?>.value(),
      ) as _i6.Future<_i3.TaskModel?>);

  @override
  _i6.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i3.TaskModel?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i6.Future<_i3.TaskModel?>.value(),
      ) as _i6.Future<_i3.TaskModel?>);

  @override
  _i6.Future<List<_i3.TaskModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i6.Future<List<_i3.TaskModel>>);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i11.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.UserModel?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<String> changePassword(
    String? userId,
    String? oldPassword,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            userId,
            oldPassword,
            newPassword,
          ],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #changePassword,
            [
              userId,
              oldPassword,
              newPassword,
            ],
          ),
        )),
      ) as _i6.Future<String>);
}

/// A class which mocks [GeminiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeminiService extends _i1.Mock implements _i12.GeminiService {
  MockGeminiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i6.Future<String> generateContent(
    String? prompt,
    String? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContent,
          [
            prompt,
            data,
          ],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #generateContent,
            [
              prompt,
              data,
            ],
          ),
        )),
      ) as _i6.Future<String>);
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i13.IUserRepository {
  MockIUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.UserModel?> getUserByEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByEmail,
          [email],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<bool> deleteUserAndTasks(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUserAndTasks,
          [userId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i4.UserModel?> create(_i4.UserModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [model],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<_i4.UserModel?> update(_i4.UserModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [model],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i4.UserModel?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i6.Future<_i4.UserModel?>.value(),
      ) as _i6.Future<_i4.UserModel?>);

  @override
  _i6.Future<List<_i4.UserModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<List<_i4.UserModel>>.value(<_i4.UserModel>[]),
      ) as _i6.Future<List<_i4.UserModel>>);
}
